// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

//Include helper functions
#include "NMGGrassBladeComputeHelpers.hlsl"

//This describes a vertex on the source mesh
struct SourceVertex{
    float3 positionOS; // Position in object spaces
};
// Source buffers, arranged as a vertex buffer and index buffer
StructuredBuffer<SourceVertex> _SourceVertices;
StructuredBuffer<int> _SourceTriangles;

//This describes a vertex on the generated mesh
struct DrawVertex
{
    float3 positionWS; // The position in the world space
    float height; //The height of this vertex on the grass blade
};
// A triangle on the generated mesh
struct DrawTriangle
{
    float3 lightingNormalWS; // A normal , in world space, to use in the lighting algorithm
    DrawVertex vertices[3]; // The three points on the triangle
};
// A buffer containing the generated mesh
AppendStructuredBuffer<DrawTriangle> _DrawTriangles;

// The indirect draw call args, as described in the renderer script
struct IndirectArgs
{
    uint numVerticesPerInstance;
    uint numInstances;
    uint startVertexIndex;
    uint startInstanceIndex;
};
//The kernel will count the number of vertices, so this must be RW enabled
RWStructuredBuffer<IndirectArgs> _IndirectArgsBuffer;

//Variables set by the renderer
int _NumSourceTriangles; //The number of triangles on the source mesh
//Local to world matrix
float4x4 _LocalToWorld;

void GetCenterAndBasis(SourceVertex a , SourceVertex b, SourceVertex c, out float3 positionWS, out float3 normalWS, out float3x3 tsToWs)
{
    //We need to figure out the center of the triangle, since that is where the blade willk sprout
    //Convert each triangle point to world space
    float3 positionA_WS = mul(_LocalToWorld, float4(a.positionOS, 1)).xyz;
    float3 positionB_WS = mul(_LocalToWorld, float4(b.positionOS, 1)).xyz;
    float3 positionC_WS = mul(_LocalToWorld, float4(c.positionOS, 1)).xyz;
    // Then get the center of the point
    GetTriangleNormalAndTSToWSMatrix(positionA_WS, positionB_WS, positionC_WS, normalWS, tsToWs);
}

// This function calculates values for the output point
DrawVertex SetupBladePoint(float3 anchorWS,float3x3 tsToWs, float2 uv)
{
    //Calculate the offset in the target space based on the UV and width/height
    float3 offsetTS = float3(uv.x - 0.5f, 0, uv.y); // Offset X by 1/2, since we want 0.5 to be on the center
    // Calculate the offset in world space using the rotation matrix
    float3 offsetWS = mul(tsToWs, offsetTS);

    float3 positionWS = anchorWS + offsetWS;

    DrawVertex output = (DrawVertex)0;
    output.positionWS = positionWS;
    output.height = uv.y;
    return output;
}

//The Main kernel
[numthreads(128, 1 , 1)]
void Main(uint3 id : SV_DispatchThreadID)
{
    if ((int)id.x >= _NumSourceTriangles)
    {
        return;
    }

    //Calculate the start index of this triangle in the index buffer
    int triStart = id.x * 3;
    //Get the triuangle center, normal vector, and tangent-to-world space transformation matrix
    float3 positionWS, normalWS;
    float3x3 tsToWs;
    GetCenterAndBasis(
        _SourceVertices[_SourceTriangles[triStart]],
        _SourceVertices[_SourceTriangles[triStart + 1]],
        _SourceVertices[_SourceTriangles[triStart + 2]],
        positionWS, normalWS, tsToWs);

    // Create an array to hold blade points
    DrawVertex vertices[3];

    //Blade points will be arranged from the bottom up in the array
    //with the point with the minimum u-coordinate in a pair appearing first

    //Append the first vertex
    vertices[0] = SetupBladePoint(positionWS, tsToWs,float2(0, 0));

    // Append the second vertex
    vertices[1] = SetupBladePoint(positionWS, tsToWs,float2(1, 0));

    // Append the tip vertex
    vertices[2] = SetupBladePoint(positionWS, tsToWs,float2(0.5, 1));

    // Add triangles from the array into the draw buffer
    // We can construct a triangle from every three adjacent points in the array
    DrawTriangle tri = (DrawTriangle)0;
    tri.lightingNormalWS = normalWS;
    tri.vertices[0] = vertices[0];
    tri.vertices[1] = vertices[1];
    tri.vertices[2] = vertices[2];
    _DrawTriangles.Append(tri);

    //InterlockedAdd(a,b) adds b to a and stores the value in a. It is a thread-sade
    //This call counts the number of vertices, storing it in the indirect arguments
    //This tells the renderer how many vertices are in the mesh in DrawProcedural
    InterlockedAdd(_IndirectArgsBuffer[0].numVerticesPerInstance, 3);
}

